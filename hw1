1. Составить таблицу соответствия между различными объектами основных классов: int, str и объектами класса bool.
2. Разобраться с различиями между input() и raw_input(). Также в контексте разных версий python: 2 и 3.
3. Найти и прочитать PEP про изменение print между python2 и python3.

1.
Int  - представляет целое число, например, 1, 4, 8, 50. При переводе из str в int необходимо, чтобы строка являлась числом

Str - строки, например "hello". В Python 3.x строки представляют набор символов в кодировке Unicode. Любой объект в Питоне можно перевести к строке, которая ему соответствует. Для этого нужно вызвать функцию str(), передав ей в качестве параметра объект, переводимый в строку.

Bool - логическое значение True или False. True эквивалентно 1, false эквивалентно 0. Поскольку bool - подкласс int, он может высчитываться как стандартный integer.

В Python можно проверить объект на true и false при помощи if.
Рассматриваются следующие объекты False в официальной документации:
константы, определенные как ложные: None и False
ноль любого числового типа: 0, 0.0, 0j, Decimal(0),Fraction(0, 1)
пустые последовательности и коллекции: '', (), [], {}, set(),range(0)
Все остальные объекты считаются True.


INT    STR    BOOL
1       1     True
0       0     True from str, False from int
err    hello  True
err    true   True
err    false  True
err    True   True
10       10   True
err      ""   False

2.
В python 2.x raw_input() возвращает строку, а input() вычисляет входные данные в контексте выполнения, в котором она вызывается. В python 3.x input был отброшен, и функция, ранее известная как raw_input , теперь стала input . Таким образом, необходимо вызывать compile и than eval , если нужна старая функциональность.

3.
Print
Python2: print "The answer is", 2*2
Python3: print("The answer is", 2*2)

Python2: print x,           # Запятая в конце подавляет перевод строки
Python3: print(x, end=" ")  # Добавляет пробел вместо перевода строки

Python2: print              # Печатает перевод строки
Python3: print()            # Нужно вызвать функцию!

Python2: print >>sys.stderr, "fatal error"
Python3: print("fatal error", file=sys.stderr)

Python2: print (x, y)       # Печатает repr((x, y))
Python3: print((x, y))      # Не путать с print(x, y)!

Функция print() не поддерживает особенность "программный пробел" старого оператора print. Например, в Python 2, print "A\n", "B" напечатает "A\nB\n"; но в Python 3, print("A\n", "B") напечатает "A\n B\n".

